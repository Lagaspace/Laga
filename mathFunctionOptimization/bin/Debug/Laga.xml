<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Laga</name>
    </assembly>
    <members>
        <member name="T:Laga.Graphics.BarChart">
            <summary>
            
            </summary>
        </member>
        <member name="M:Laga.Graphics.BarChart.#ctor(System.Windows.Controls.InkCanvas)">
            <summary>
            
            </summary>
            <param name="inkCanvas"></param>
        </member>
        <member name="T:Laga.Graphics.Notebook">
            <summary>
            Static class to write in textboxes.
            </summary>
        </member>
        <member name="M:Laga.Graphics.Notebook.PrintLines(System.Windows.Controls.TextBox,System.String[],System.Boolean)">
            <summary>
            Print line by line in a textbox. For appareance and other properties refer to xaml. 
            </summary>
            <param name="textBox">the textbox</param>
            <param name="arrMessages">array of strings</param>
            <param name="clear">in case you want to clean the textbox before to write</param>
        </member>
        <member name="M:Laga.Graphics.Notebook.PrintPopulation(System.Windows.Controls.TextBox,System.Double[][],System.String[],System.Char,System.String,System.Boolean)">
            <summary>
            Print line by line in a text box the content in a population. For appearence and other properties refer to xaml.
            </summary>
            <param name="textBox">the textbox</param>
            <param name="population">the popupation to write</param>
            <param name="prefix">an array of prefixs between chromosomes in the population</param>
            <param name="inLine">a char to define if you want to print in line: 'i' or under line: any other char.</param>
            <param name="sep">The string to use as a separator between genes in the chromosome</param>
            <param name="clear">in case you want to clean the textbox before to write</param>
        </member>
        <member name="M:Laga.Graphics.Notebook.PrintPopulation(System.Windows.Controls.TextBox,System.Single[][],System.String[],System.String,System.Boolean)">
            <summary>
            Print line by line in a text box the content in a population. For appearence and other properties refer to xaml.
            </summary>
            <param name="textBox">the textbox</param>
            <param name="population">the popupation to write</param>
            <param name="prefix">an array of prefixs between chromosomes in the population</param>
            <param name="sep">The string to use as a separator between genes in the chromosome</param>
            <param name="clear">in case you want to clean the textbox before to write</param>
        </member>
        <member name="M:Laga.Graphics.Notebook.PrintPopulation(System.Windows.Controls.TextBox,System.Int32[][],System.String[],System.String,System.Boolean)">
            <summary>
            Print line by line in a text box the content in a population. For appearence and other properties refer to xaml.
            </summary>
            <param name="textBox">the textbox</param>
            <param name="population">the popupation to write</param>
            <param name="prefix">an array of prefixs between chromosomes in the population</param>
            <param name="sep">The string to use as a separator between genes in the chromosome</param>
            <param name="clear">in case you want to clean the textbox before to write</param>
        </member>
        <member name="M:Laga.Graphics.Notebook.PrintPopulation(System.Windows.Controls.TextBox,System.Char[][],System.String[],System.Char,System.String,System.Boolean)">
            <summary>
            Print line by line in a text box the content in a population. For appearence and other properties refer to xaml.
            </summary>
            <param name="textBox">the textbox</param>
            <param name="population">the popupation to write</param>
            <param name="prefix">an array of prefixs between chromosomes in the population</param>
            <param name="inLine">a char to define if you want to print in line: 'i' or under line: any other char.</param>
            <param name="sep">The string to use as a separator between genes in the chromosome</param>
            <param name="clear">in case you want to clean the textbox before to write</param>
        </member>
        <member name="M:Laga.Graphics.Notebook.PrintPopulation(System.Windows.Controls.TextBox,Laga.GeneticAlgorithm.point[][],System.String[],System.String,System.Int32,System.Boolean)">
            <summary>
            Print line by line in a text box the content in a population. For appearence and other properties refer to xaml.
            </summary>
            <param name="textBox">the textbox</param>
            <param name="population">the popupation to write</param>
            <param name="prefix">an array of prefixs between chromosomes in the population</param>
            <param name="sep">The string to use as a separator between genes in the chromosome</param>
            <param name="clear">in case you want to clean the textbox before to write</param>
        </member>
        <member name="T:Laga.GeneticAlgorithm.Crossover">
            <summary>
            Crossover class
            </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.Crossover.IndexParent">
            <summary>
            get and set indexes for parents in crossover.
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover.SinglePointCrossover(System.Object[][],System.Single,System.Int32)">
            <summary>
            A crossover algorithm performed in a single point of the chromosome.
            </summary>
            <param name="population">The population to perform the crossover</param>
            <param name="percent">Which percent of chromosomes will be croosver</param>
            <param name="pointCutter">Where the crossover will be executed</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover.SinglePointCrossover(System.Double[][],System.Single,System.Int32)">
            <summary>
            A crossover algorithm performed in a single point of the chromosome.
            </summary>
            <param name="population">The population to perform the crossover</param>
            <param name="percent">Which percent of chromosomes will be croosver</param>
            <param name="pointCutter">Where the crossover will be executed</param>
            <returns>double[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover.SinglePointCrossover(System.Single[][],System.Single,System.Int32)">
            <summary>
            A crossover algorithm performed in a single point of the chromosome.
            </summary>
            <param name="population">The population to perform the crossover</param>
            <param name="percent">Which percent of chromosomes will be croosver</param>
            <param name="pointCutter">Where the crossover will be executed</param>
            <returns>float[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover.SinglePointCrossover(System.Int32[][],System.Single,System.Int32)">
            <summary>
            A crossover algorithm performed in a single point of the chromosome.
            </summary>
            <param name="population">The population to perform the crossover</param>
            <param name="percent">Which percent of chromosomes will be croosver</param>
            <param name="pointCutter">Where the crossover will be executed</param>
            <returns>int[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Crossover.SinglePointCrossover(System.Char[][],System.Single,System.Int32)">
            <summary>
            A crossover algorithm performed in a single point of the chromosome.
            </summary>
            <param name="population">The population to perform the crossover</param>
            <param name="percent">Which percent of chromosomes will be croosver</param>
            <param name="pointCutter">Where the crossover will be executed</param>
            <returns>Char[][]</returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.GenrChromosome">
            <summary>
            use this class to creates Chromosomes.
            </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.GenrChromosome.SizeChrom">
            <summary>
            size of the chromosome
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.#ctor(System.Int32)">
            <summary>
            Constructor:
            </summary>
            <param name="Size">The Lengthof the Chromosome</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Double,System.Double)">
            <summary>
            the method generates a chromosome composed by random doubles
            between min and max.
            </summary>
            <param name="min">The min value in the chromosome</param>
            <param name="max">The max value in the chromosome(exclusive upper bound)</param>
            <returns>double[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Single,System.Single)">
            <summary>
            the method generates a chromosome composed by random floats
            between min and max.
            </summary>
            <param name="min">The min value in the chromosome</param>
            <param name="max">The max value in the chromosome(exclusive upper bound)</param>
            <returns>float[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosome(System.Int32,System.Int32)">
            <summary>
            the method generates a chromosome composed by random integers
            between min and max.
            </summary>
            <param name="min">The min value in the chromosome</param>
            <param name="max">The max value in the chromosome(exclusive upper bound)</param>
            <returns>int[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeBinary">
            <summary>
            creates a binary chromosome composed by 1s and 0s;
            </summary>
            <returns> a random list of 1s and 0s</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.NumberChromosomeSwap(System.Int32,System.Int32)">
            <summary>
            the method generate a number chromosome composed by non repeated numbers between start and start + size(not inclusive).
            the method is based on integer numbers. this method is designed by combinatorial problems.
            </summary>
            <param name="min">the minimum value in the sequence</param>
            /// <param name="max">the maximum value in the sequence</param>
            <returns>a non repeat random integer list</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrChromosome.CharChromosomeBinary">
            <summary>
            Generates a binary chromosome of chars.
            </summary>
            <returns>a random char list of 1s and 0s</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Laga.GeneticAlgorithm.GenrChromosome.CharChromosome(System.Int32,System.Int32)" -->
        <member name="T:Laga.GeneticAlgorithm.GenrPopulation">
            <summary>
            use this class to create a Population
            </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.GenrPopulation.SizePop">
            <summary>
            SizePopulation
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.#ctor(System.Int32)">
            <summary>
            Constructor:
            </summary>
            <param name="SizePopulation">The size of the Population</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.ObjectPopulationSwap(System.Object[],System.Single,System.Boolean)">
            <summary>
            Genr8 a random population based on a chromosome of objects[]
            </summary>
            <param name="SeedChromosome">The seed chromosome to genr8 the population</param>
            <param name="percent">the mutation percent in the population</param>
            <param name="InOut">true to include the seed chromosome in the population</param>
            <returns>Population object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.NumPopulation(System.Int32,System.Double,System.Double)">
            <summary>
            Genr8 a Population of random double.
            </summary>
            <param name="sizeChromosome">The size of the chromosome</param>
            <param name="min">The minimum value in the chromosome, inclusive</param>
            <param name="max">The maximum value in the chromosome, inclusive</param>
            <returns>Population double[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.NumPopulation(System.Int32,System.Single,System.Single)">
            <summary>
            Genr8 a Population of random float.
            </summary>
            <param name="sizeChromosome">The size of the chromosome</param>
            <param name="min">The minimum value in the chromosome, inclusive</param>
            <param name="max">The maximum value in the chromosome, inclusive</param>
            <returns>Population float[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.NumPopulation(System.Int32,System.Int32,System.Int32)">
            <summary>
            Genr8 a Population of random int.
            </summary>
            <param name="sizeChromosome">The size of the chromosome</param>
            <param name="min">The minimum value in the chromosome, inclusive</param>
            <param name="max">The maximum value in the chromosome, inclusive</param>
            <returns>Population int[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.NumPopulationSwap(System.Int32,System.Int32)">
            <summary>
            Genr8 a Population of random integers, between min and max value.
            </summary>
            <param name="min">The minimum value in the chromosome, inclusive</param>
            <param name="max">The maximum value in the chromosome, inclusive</param>
            <returns>Population int[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.BinaryPopulationInt(System.Int32)">
            <summary>
            Genr8 a binary Population 101011...
            </summary>
            <param name="sizeChromosome">The size of the chromosome</param>
            <returns>Population int[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.BinaryPopulationChr(System.Int32)">
            <summary>
            Genr8 a binary Population '1','0','1','0','1','1'...
            </summary>
            <param name="sizeChromosome">The size of the chromosome</param>
            <returns>Population char[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.CharPopulation(System.Int32,System.Int32,System.Int32)">
            <summary>
            Genr8 a Population composed by random chars.
            based on this link: http://www.asciitable.com/
            </summary>
            <param name="sizeChromosome">The size of the chromosome</param>
            <param name="start">the start number for the table, inclusive: Eg: 97</param>
            <param name="end">the end number for the table, inclusive: Eg: 122</param>
            <returns>Population char[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.GenrPopulation.PointPopulation(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Genr8 a Random population of points [x,y,z]
            </summary>
            <param name="SizeChromosome">The length of the chromosome</param>
            <param name="minX">The minimum value for X coordinate</param>
            <param name="maxX">The maximum value for X coordinate</param>
            <param name="minY">The minimum value for Y coordinate</param>
            <param name="maxY">The maximum value for Y coordinate</param>
            <param name="minZ">The minimum value for Z coordinate</param>
            <param name="maxZ">The maximum value for Z coordinate</param>
            <returns> a population of points</returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.LagaTools">
            <summary>
            A collection of tools to operate on populations and chromosomes.
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.BinaryChromosomeToInteger``1(``0[])">
            <summary>
            Convert a binary chromosome to an integer, base of 2.
            </summary>
            <typeparam name="T">chromosome type</typeparam>
            <param name="chromosome">your chromosome</param>
            <returns>the integer.</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.ExtractDNA``1(``0[],System.Int32,System.Int32)">
            <summary>
            Extract part of the DNA from a chromosome. 
            </summary>
            <typeparam name="T">any chromosome type</typeparam>
            <param name="chromosome">the chromosome</param>
            <param name="index">start the extraction</param>
            <param name="length">length of the extraction</param>
            <returns>a piece of the DNA from the original chromosome</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.ReversePopulation(System.Char[][])">
            <summary>
            Reverse the original Population
            </summary>
            <param name="charPop">char[][]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.Prefix(System.String,System.Int32)">
            <summary>
            Generate prefixs.
            </summary>
            <param name="prefix">string prefix</param>
            <param name="size">the length of prefix to generate</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.Parse(Laga.GeneticAlgorithm.point[],System.Int32)">
            <summary>
            Round the location of a laga point, based on the round number
            </summary>
            <param name="any">point[]</param>
            <param name="round">int</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.Parse(System.Double[])">
            <summary>
            Parse any Chromosome type to string Array
            </summary>
            <param name="any">double[]</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.Parse(System.Int32[])">
            <summary>
            Parse a list of integers into a list of strings
            </summary>
            <param name="any">int[]</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.Parse(System.Single[])">
            <summary>
            Parse a list of floats into a list of strings
            </summary>
            <param name="any">float[]</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.Parse(System.Char[])">
            <summary>
            Parse a list of char to a list of strings
            </summary>
            <param name="any">char[]</param>
            <returns>string[]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.Reverse(System.Single[])">
            <summary>
            Reverse the original array of floats.
            </summary>
            <param name="arrFloat">float[]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.Reverse(System.Int32[])">
            <summary>
            Reverse the original array of integers
            </summary>
            <param name="arrInt">int[]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.Reverse(System.Double[])">
            <summary>
            Reverse the original array of doubles
            </summary>
            <param name="arrDbl">double[]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.ReversePopulation(System.Int32[][])">
            <summary>
            Reverse Original integer population
            </summary>
            <param name="intPop">int[][]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.ReversePopulation(System.Double[][])">
            <summary>
            Reverse original double population
            </summary>
            <param name="dblPop">double[][]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.ReversePopulation(System.Single[][])">
            <summary>
            Reverse original float population
            </summary>
            <param name="flPop">float[][]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.ReversePopulation(System.Object[][])">
            <summary>
            Reverse original object population
            </summary>
            <param name="objPop">object[][]</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.Fisher_Yates(System.Int32[])">
            <summary>
            Fisher-Yates Shuffle Algorithm for an array of integers.
            </summary>
            <param name="arrInt"> the array of integers to shuffle</param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.Fisher_Yates(System.Object[])">
            <summary>
            Fisher-Yates Shuffle Algorithm for an array of objects.
            </summary>
            <param name="arrObj">the array of objects to shuffle</param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.Fisher_YatesPercent(System.Object[],System.Single)">
            <summary>
            Fisher-Yates Shuffle Algorithm for an array of objects.
            </summary>
            <param name="arrObj">the array of objects to shuffle</param>
            <param name="percent">the percent to shuffle</param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.GetRandomNumber(System.Int32,System.Int32)">
            <summary>
            Random integer number between range
            </summary>
            <param name="min">int</param>
            <param name="max">int</param>
            <returns>int</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.GetRandomNumber">
            <summary>
            Random number
            </summary>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.RandomCharBinary(System.Single)">
            <summary>
            Returns a Char in the format 0 or 1
            </summary>
            <param name="thershold">thershold parameter. 0.5 = 50%</param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.RandomChar(System.Int32,System.Int32)">
            <summary>
            Generate a random char.
            based on this link: http://www.asciitable.com/
            </summary>
            <param name="start">the start number for the table, inclusive</param>
            <param name="end">the end number for the table, inclusive</param>
            <returns>char</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.Fishe_Yates``1(``0[])">
            <summary>
            Experimental Fisher_Yates
            </summary>
            <typeparam name="T">the type of data</typeparam>
            <param name="arrData">the array of data</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.RandomInt(System.Int32,System.Int32,System.Single)">
            <summary>
            Return non repetead integers between a min max and percent.
            </summary>
            <param name="min">the minimum value</param>
            <param name="max">the maximum value</param>
            <param name="percent">the percent of return, if 1f will return all the numbers.</param>
            <returns>array of integers if wrong array of 0</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.LagaTools.Mom_Dad(System.Int32,System.Single)">
            <summary>
            Non repeated indexs.
            </summary>
            <param name="lengthPop">the length of the population</param>
            <param name="percent">the percent of mutation</param>
            <returns>array of indexs</returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.Mutation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.#ctor(System.Single)">
            <summary>
            
            </summary>
            <param name="MutationRate"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.MutationSwap(System.Object[][],System.Single)">
            <summary>
            
            </summary>
            <param name="pop"></param>
            <param name="percentChrom"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.MutationSwap(System.Object[],System.Single)">
            <summary>
            
            </summary>
            <param name="chrom"></param>
            <param name="p"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Double[][],System.Double,System.Double,System.Single)">
            <summary>
            
            </summary>
            <param name="pop"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="percentChrom"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.DoubleMutation(System.Double[],System.Single,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="mutatedPop"></param>
            <param name="percent"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Single[][],System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="pop"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="percentChrom"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.FloatMutation(System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="mutatedPop"></param>
            <param name="percent"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.NumbMutation(System.Int32[][],System.Int32,System.Int32,System.Single)">
            <summary>
            
            </summary>
            <param name="pop"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="percentChrom"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.IntMutation(System.Int32[],System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="mutatedPop"></param>
            <param name="percent"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.BinaryCharMutation(System.Char[][],System.Single)">
            <summary>
            
            </summary>
            <param name="pop"></param>
            <param name="ChroPercent"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Mutation.CharMutation(System.Char[][],System.Single,System.Int32,System.Int32)">
            <summary>
            A Mutation Algorithm
            </summary>
            <param name="pop">The population to perform the mutation</param>
            <param name="ChroPercent">the percent of mutation in the chromosome</param>
            <param name="start">the start number for the table, inclusive: Eg: 97</param>
            <param name="end">the end number for the table, inclusive: Eg: 122</param>
            <returns>char[][]</returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.NaturalSelection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.Elitism(System.Object[][],System.Int32)">
             ElitismSelection method.
             select the number of the best individual in the population.
            
             @param srtPopulation -> a sorted population by any sort algorithm.
             @param count         -> quantity of individuals selected for the next generation.
             @return object[][] population.
             
             
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.RouletteWheelNonPolinomicMin(System.Object[][],System.Int32[],System.Int32)">
            RouletteWheel method.
            select a number of individuals depending of their ranking in the population.
            the best ranked individuals have more chance to be selected than worst. 
            All individuals in the population have the chance to be selected. This algorithm is based in a non-polinomic curve (y = 1/x).
            
            @param srtPopulation -> a sorted population by any sort algorithm.
            @param results 		-> the array of results from the evaluation in int[] flavour
            @param maxItem 		-> the maxItem is the maximum number of selected individuals in the roulette wheel.
            @return object[][] population.
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="maxItem"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.RouletteWheel(System.Object[][],System.Single[],System.Int32)">
            RouletteWheel method.
            select a number of individuals depending of their ranking in the population.
            the best ranked individuals have more chance to be selected than worst. 
            All individuals in the population have the chance to be selected. This algorithm is based in a non-polinomic curve (y = 1/x).
            
            @param srtPopulation -> a sorted population by any sort algorithm.
            @param results 		-> the array of results from the evaluation in int[] flavour
            @param maxItem 		-> the maxItem is the maximum number of selected individuals in the roulette wheel.
            @return object[][] population.
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="maxItem"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Laga.GeneticAlgorithm.NaturalSelection.RouletteWheelSigmoidal(System.Object[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)" -->
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.TournamentSelection(System.Object[][],System.Int32[],System.Int32,System.Int32,System.String)">
            TournamentSelection method.
            select a number of indiviudals trough a tournament selection.
            As medieval tournament, the individuals have to compete in a tournament, the best individuals will be selected by the next generation
            An interest parameter is the preasure: as bigger value is, best individuals will be selected.
            This method return a new population and can be bigger than the original size.
            in the TorunamentSelection method is not necessary a sorted population.
            
            @param srtPopulation -> a population.
            @param resutls		-> the array of results from the evaluation in int[] flavor.
            @param numbTour 		-> the quantity of tournaments, any integer.
            @param preasure 	 	-> number of individuals in the competition.
            @param type	 		-> String value: if is "min" the competition will select as a "winner" the smallest value in the population. other the bigger.
            @param s				-> the decay of the curve. (See RouletteWheelSigmoidalEngine.pde).
            @return object[][] population.
            
            
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="numbTour"></param>
            <param name="preasure"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.TournamentSelection(System.Object[][],System.Single[],System.Int32,System.Int32,System.String)">
            TournamentSelection method.
            select a number of indiviudals trough a tournament selection.
            As medieval tournament, the individuals have to compete in a tournament, the best individuals will be selected by the next generation
            An interest parameter is the preasure: as bigger value is, best individuals will be selected.
            This method return a new population and can be bigger than the original size.
            in the TorunamentSelection method is not necessary a sorted population.
            
            @param srtPopulation -> a population.
            @param resutls		-> the array of results from the evaluation in float[] flavor.
            @param numbTour 		-> the quantity of tournaments, any integer.
            @param preasure 	 	-> number of individuals in the competition.
            @param type	 		-> String value: if is "min" the competition will select as a "winner" the smallest value in the population. other the bigger.
            @param s				-> the decay of the curve. (See RouletteWheelSigmoidalEngine.pde).
            @return object[][] population.
            
            
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="numbTour"></param>
            <param name="preasure"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.Elitism(System.Double[][],System.Int32)">
             ElitismSelection method.
             select the number of the best indiviudals in the population.
            
             @param srtPopulation -> a sorted population by any sort algorithm.
             @param count         -> quantity of individuals selected for the next generation.
             @return double[][] population.
             
             
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.RouletteWheelNonPolinomicMin(System.Double[][],System.Single[],System.Int32)">
            RouletteWheel method.
            select a number of individuals depending of their ranking in the population.
            the best ranked individuals have more chance to be selected than worst. 
            All individuals in the population have the chance to be selected. This algorithm is based in a non-polinomic curve (y = 1/x).
            
            @param srtPopulation -> a sorted population by any sort algorithm.
            @param results 		-> the array of results from the evaluation in int[] flavour
            @param maxItem 		-> the maxItem is the maximum number of selected individuals in the roulette wheel.
            @return double[][] population.
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="maxItem"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.RouletteWheel(System.Double[][],System.Int32[],System.Int32)">
            RouletteWheel method.
            select a number of individuals depending of their ranking in the population.
            the best ranked individuals have more chance to be selected than worst. 
            All individuals in the population have the chance to be selected. This algorithm is based in a non-polinomic curve (y = 1/x).
            
            @param srtPopulation -> a sorted population by any sort algorithm.
            @param results 		-> the array of results from the evaluation in int[] flavour
            @param maxItem 		-> the maxItem is the maximum number of selected individuals in the roulette wheel.
            @return double[][] population.
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="maxItem"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.RouletteWheelSigmoidal(System.Double[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Roulette Wheel Selection
            </summary>
            <param name="srtPopulation">double[][], a sorted population by any sort algorithm</param>
            <param name="sizeRoulette">int, number of the individuals to select</param>
            <param name="A1">int, the maximum number of individuals in the roulette wheel (aprox)</param>
            <param name="A2">int, the minimum number of individuals in the roulette wheel (aprox)</param>
            <param name="B1">int, the start scope in the population: 1 the selection will start in the second individual</param>
            <param name="B2">int, the scope in the population, if size population, then all individuals will be included</param>
            <param name="s">float, factor decay: between 0 and 1 </param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.TournamentSelection(System.Double[][],System.Single[],System.Int32,System.Int32,System.String)">
            TournamentSelection method.
            select a number of indiviudals trough a tournament selection.
            As medieval tournament, the individuals have to compete in a tournament, the best individuals will be selected by the next generation
            An interest parameter is the preasure: as bigger value is, best individuals will be selected.
            This method return a new population and can be bigger than the original size.
            in the TorunamentSelection method is not necessary a sorted population.
            
            @param srtPopulation -> a population.
            @param resutls		-> the array of results from the evaluation in float[] flavor.
            @param numbTour 		-> the quantity of tournaments, any integer.
            @param preasure 	 	-> number of individuals in the competition.
            @param type	 		-> String value: if is "min" the competition will select as a "winner" the smallest value in the population. other the bigger.
            @param s				-> the decay of the curve. (See RouletteWheelSigmoidalEngine.pde).
            @return double[][] population.
            
            
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="numbTour"></param>
            <param name="preasure"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.TournamentSelection(System.Double[][],System.Int32[],System.Int32,System.Int32,System.String)">
            TournamentSelection method.
            select a number of indiviudals trough a tournament selection.
            As medieval tournament, the individuals have to compete in a tournament, the best individuals will be selected by the next generation
            An interest parameter is the preasure: as bigger value is, best individuals will be selected.
            This method return a new population and can be bigger than the original size.
            in the TorunamentSelection method is not necessary a sorted population.
            
            @param srtPopulation -> a population.
            @param resutls		-> the array of results from the evaluation in int[] flavor.
            @param numbTour 		-> the quantity of tournaments, any integer.
            @param preasure 	 	-> number of individuals in the competition.
            @param type	 		-> String value: if is "min" the competition will select as a "winner" the smallest value in the population. other the bigger.
            @param s				-> the decay of the curve. (See RouletteWheelSigmoidalEngine.pde).
            @return double[][] population.
            
            
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="numbTour"></param>
            <param name="preasure"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.Elitism(System.Single[][],System.Int32)">
             ElitismSelection method.
             select the number of the best indiviudals in the population.
            
             @param srtPopulation -> a sorted population by any sort algorithm.
             @param count         -> quantity of individuals selected for the next generation.
             @return float[][] population.
             
             
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.RouletteWheel(System.Single[][],System.Single[],System.Int32)">
            RouletteWheel method.
            select a number of individuals depending of their ranking in the population.
            the best ranked individuals have more chance to be selected than worst. 
            All individuals in the population have the chance to be selected. This algorithm is based in a non-polinomic curve (y = 1/x).
            
            @param srtPopulation -> a sorted population by any sort algorithm.
            @param results 		-> the array of results from the evaluation in int[] flavour
            @param maxItem 		-> the maxItem is the maximum number of selected individuals in the roulette wheel.
            @return float[][] population.
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="maxItem"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.RouletteWheel(System.Single[][],System.Int32[],System.Int32)">
            RouletteWheel method.
            select a number of individuals depending of their ranking in the population.
            the best ranked individuals have more chance to be selected than worst. 
            All individuals in the population have the chance to be selected. This algorithm is based in a non-polinomic curve (y = 1/x).
            
            @param srtPopulation -> a sorted population by any sort algorithm.
            @param results 		-> the array of results from the evaluation in int[] flavour
            @param maxItem 		-> the maxItem is the maximum number of selected individuals in the roulette wheel.
            @return float[][] population.
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="maxItem"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.RouletteWheelSigmoidal(System.Single[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            RouletteWheelSigmoidal method.
            select a number of indiviudals depending of their ranking in the population.
            the best ranked individuals have more chance to be selected thant worst. 
            Although all the individuals has a chance to be selected. the roulette wheel is based in sigmoidal curve, (See RouletteWheelSigmoidalEngine.pde).
            
            @param srtPopulation -> a sorted population by any sort algorithm.
            @param sizeRoulette  -> number of the individuals selected.
            @param A1			-> the maximum number of individuals in the roulette wheel (aprox).
            @param A2 			-> the minimum number of individuals in the roulette wheel (aprox).
            @param B1 	 		-> the start scope in the population, i.e. 1 the selection will start in the second individual
            @param B2	 		-> the end scope in the population, i.e. the size of the population: the las individuals (worst) will be included.
            @param s				-> the decay of the curve. (See RouletteWheelSigmoidalEngine.pde).
            @return float[][] population.
            
            
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="sizeRoulette"></param>
            <param name="A1"></param>
            <param name="A2"></param>
            <param name="B1"></param>
            <param name="B2"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.TournamentSelection(System.Single[][],System.Single[],System.Int32,System.Int32,System.String)">
            TournamentSelection method.
            select a number of indiviudals trough a tournament selection.
            As medieval tournament, the individuals have to compete in a tournament, the best individuals will be selected by the next generation
            An interest parameter is the preasure: as bigger value is, best individuals will be selected.
            This method return a new population and can be bigger than the original size.
            in the TorunamentSelection method is not necessary a sorted population.
            
            @param srtPopulation -> a population.
            @param resutls		-> the array of results from the evaluation in float[] flavor.
            @param numbTour 		-> the quantity of tournaments, any integer.
            @param preasure 	 	-> number of individuals in the competition.
            @param type	 		-> String value: if is "min" the competition will select as a "winner" the smallest value in the population. other the bigger.
            @param s				-> the decay of the curve. (See RouletteWheelSigmoidalEngine.pde).
            @return float[][] population.
            
            
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="numbTour"></param>
            <param name="preasure"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.TournamentSelection(System.Single[][],System.Int32[],System.Int32,System.Int32,System.String)">
            TournamentSelection method.
            select a number of indiviudals trough a tournament selection.
            As medieval tournament, the individuals have to compete in a tournament, the best individuals will be selected by the next generation
            An interest parameter is the preasure: as bigger value is, best individuals will be selected.
            This method return a new population and can be bigger than the original size.
            in the TorunamentSelection method is not necessary a sorted population.
            
            @param srtPopulation -> a population.
            @param resutls		-> the array of results from the evaluation in int[] flavor.
            @param numbTour 		-> the quantity of tournaments, any integer.
            @param preasure 	 	-> number of individuals in the competition.
            @param type	 		-> String value: if is "min" the competition will select as a "winner" the smallest value in the population. other the bigger.
            @param s				-> the decay of the curve. (See RouletteWheelSigmoidalEngine.pde).
            @return float[][] population.
            
            
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="numbTour"></param>
            <param name="preasure"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.Elitism(System.Int32[][],System.Int32)">
             ElitismSelection method.
             select the number of the best indiviudals in the population.
            
             @param srtPopulation -> a sorted population by any sort algorithm.
             @param count         -> quantity of individuals selected for the next generation.
             @return int[][] population.
             
             
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.RouletteWheel(System.Int32[][],System.Single[],System.Int32)">
            RouletteWheel method.
            select a number of individuals depending of their ranking in the population.
            the best ranked individuals have more chance to be selected than worst. 
            All individuals in the population have the chance to be selected. This algorithm is based in a non-polinomic curve (y = 1/x).
            
            @param srtPopulation -> a sorted population by any sort algorithm.
            @param results 		-> the array of results from the evaluation in int[] flavour
            @param maxItem 		-> the maxItem is the maximum number of selected individuals in the roulette wheel.
            @return int[][] population.
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="maxItem"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.RouletteWheel(System.Int32[][],System.Int32[],System.Int32)">
            RouletteWheel method.
            select a number of individuals depending of their ranking in the population.
            the best ranked individuals have more chance to be selected than worst. 
            All individuals in the population have the chance to be selected. This algorithm is based in a non-polinomic curve (y = 1/x).
            
            @param srtPopulation -> a sorted population by any sort algorithm.
            @param results 		-> the array of results from the evaluation in int[] flavour
            @param maxItem 		-> the maxItem is the maximum number of selected individuals in the roulette wheel.
            @return int[][] population.
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="maxItem"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.RouletteWheelSigmoidal(System.Int32[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            RouletteWheelSigmoidal method.
            select a number of indiviudals depending of their ranking in the population.
            the best ranked individuals have more chance to be selected thant worst. 
            Although all the individuals has a chance to be selected. the roulette wheel is based in sigmoidal curve, (See RouletteWheelSigmoidalEngine.pde).
            
            @param srtPopulation -> a sorted population by any sort algorithm.
            @param sizeRoulette  -> number of the individuals selected.
            @param A1			-> the maximum number of individuals in the roulette wheel (aprox).
            @param A2 			-> the minimum number of individuals in the roulette wheel (aprox).
            @param B1 	 		-> the start scope in the population, i.e. 1 the selection will start in the second individual
            @param B2	 		-> the end scope in the population, i.e. the size of the population: the las individuals (worst) will be included.
            @param s				-> the decay of the curve. (See RouletteWheelSigmoidalEngine.pde).
            @return int[][] population.
            
            
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="sizeRoulette"></param>
            <param name="A1"></param>
            <param name="A2"></param>
            <param name="B1"></param>
            <param name="B2"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.TournamentSelection(System.Int32[][],System.Single[],System.Int32,System.Int32,System.String)">
            TournamentSelection method.
            select a number of indiviudals trough a tournament selection.
            As medieval tournament, the individuals have to compete in a tournament, the best individuals will be selected by the next generation
            An interest parameter is the preasure: as bigger value is, best individuals will be selected.
            This method return a new population and can be bigger than the original size.
            in the TorunamentSelection method is not necessary a sorted population.
            
            @param srtPopulation -> a population.
            @param resutls		-> the array of results from the evaluation in float[] flavor.
            @param numbTour 		-> the quantity of tournaments, any integer.
            @param preasure 	 	-> number of individuals in the competition.
            @param type	 		-> String value: if is "min" the competition will select as a "winner" the smallest value in the population. other the bigger.
            @param s				-> the decay of the curve. (See RouletteWheelSigmoidalEngine.pde).
            @return int[][] population.
            
            
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="numbTour"></param>
            <param name="preasure"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.TournamentSelection(System.Int32[][],System.Int32[],System.Int32,System.Int32,System.String)">
            TournamentSelection method.
            select a number of individuals trough a tournament selection.
            As medieval tournament, the individuals have to compete in a tournament, the best individuals will be selected by the next generation
            An interest parameter is the pressure: as bigger value is, best individuals will be selected.
            This method return a new population and can be bigger than the original size.
            in the TorunamentSelection method is not necessary a sorted population.
            
            @param srtPopulation -> a population.
            @param resutls		-> the array of results from the evaluation in int[] flavour.
            @param numbTour 		-> the quantity of tournaments, any integer.
            @param preasure 	 	-> number of individuals in the competition.
            @param type	 		-> String value: if is "min" the competition will select as a "winner" the smallest value in the population. other the bigger.
            @param s				-> the decay of the curve. (See RouletteWheelSigmoidalEngine.pde).
            @return int[][] population.
            
            
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="numbTour"></param>
            <param name="preasure"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.Elitism(System.Char[][],System.Int32)">
             ElitismSelection method.
             select the number of the best indiviudals in the population.
            
             @param srtPopulation -> a sorted population by any sort algorithm.
             @param count         -> quantity of individuals selected for the next generation.
             @return char[][] population.
             
             
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.RouletteWheel(System.Char[][],System.Single[],System.Int32)">
            RouletteWheel method.
            select a number of individuals depending of their ranking in the population.
            the best ranked individuals have more chance to be selected than worst. 
            All individuals in the population have the chance to be selected. This algorithm is based in a non-polinomic curve (y = 1/x).
            
            @param srtPopulation -> a sorted population by any sort algorithm.
            @param results 		-> the array of results from the evaluation in int[] flavour
            @param maxItem 		-> the maxItem is the maximum number of selected individuals in the roulette wheel.
            @return char[][] population.
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="maxItem"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.RouletteWheel(System.Char[][],System.Int32[],System.Int32)">
            RouletteWheel method.
            select a number of individuals depending of their ranking in the population.
            the best ranked individuals have more chance to be selected than worst. 
            All individuals in the population have the chance to be selected. This algorithm is based in a non-polinomic curve (y = 1/x).
            
            @param srtPopulation -> a sorted population by any sort algorithm.
            @param results 		-> the array of results from the evaluation in int[] flavour
            @param maxItem 		-> the maxItem is the maximum number of selected individuals in the roulette wheel.
            @return char[][] population.
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="maxItem"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.RouletteWheelSigmoidal(System.Char[][],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            RouletteWheelSigmoidal method.
            select a number of indiviudals depending of their ranking in the population.
            the best ranked individuals have more chance to be selected thant worst. 
            Although all the individuals has a chance to be selected. the roulette wheel is based in sigmoidal curve, (See RouletteWheelSigmoidalEngine.pde).
            
            @param srtPopulation -> a sorted population by any sort algorithm.
            @param sizeRoulette  -> number of the individuals selected.
            @param A1			-> the maximum number of individuals in the roulette wheel (aprox).
            @param A2 			-> the minimum number of individuals in the roulette wheel (aprox).
            @param B1 	 		-> the start scope in the population, i.e. 1 the selection will start in the second individual
            @param B2	 		-> the end scope in the population, i.e. the size of the population: the las individuals (worst) will be included.
            @param s				-> the decay of the curve. (See RouletteWheelSigmoidalEngine.pde).
            @return char[][] population.
            
            
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="sizeRoulette"></param>
            <param name="A1"></param>
            <param name="A2"></param>
            <param name="B1"></param>
            <param name="B2"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.TournamentSelection(System.Char[][],System.Single[],System.Int32,System.Int32,System.String)">
            TournamentSelection method.
            select a number of indiviudals trough a tournament selection.
            As medieval tournament, the individuals have to compete in a tournament, the best individuals will be selected by the next generation
            An interest parameter is the preasure: as bigger value is, best individuals will be selected.
            This method return a new population and can be bigger than the original size.
            in the TorunamentSelection method is not necessary a sorted population.
            
            @param srtPopulation -> a population.
            @param resutls		-> the array of results from the evaluation in float[] flavor.
            @param numbTour 		-> the quantity of tournaments, any integer.
            @param preasure 	 	-> number of individuals in the competition.
            @param type	 		-> String value: if is "min" the competition will select as a "winner" the smallest value in the population. other the bigger.
            @param s				-> the decay of the curve. (See RouletteWheelSigmoidalEngine.pde).
            @return char[][] population.
            
            
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="numbTour"></param>
            <param name="preasure"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.NaturalSelection.TournamentSelection(System.Char[][],System.Int32[],System.Int32,System.Int32,System.String)">
            TournamentSelection method.
            select a number of indiviudals trough a tournament selection.
            As medieval tournament, the individuals have to compete in a tournament, the best individuals will be selected by the next generation
            An interest parameter is the preasure: as bigger value is, best individuals will be selected.
            This method return a new population and can be bigger than the original size.
            in the TorunamentSelection method is not necessary a sorted population.
            
            @param srtPopulation -> a population.
            @param resutls		-> the array of results from the evaluation in int[] flavor.
            @param numbTour 		-> the quantity of tournaments, any integer.
            @param preasure 	 	-> number of individuals in the competition.
            @param type	 		-> String value: if is "min" the competition will select as a "winner" the smallest value in the population. other the bigger.
            @param s				-> the decay of the curve. (See RouletteWheelSigmoidalEngine.pde).
            @return char[][] population.
            
            
            <summary>
            
            </summary>
            <param name="srtPopulation"></param>
            <param name="results"></param>
            <param name="numbTour"></param>
            <param name="preasure"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.point">
            <summary>
            generic point class made by 3 doubles.
            </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.point.X">
            <summary>
            get set X coordiante
            </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.point.Y">
            <summary>
            get set Y coordinate
            </summary>
        </member>
        <member name="P:Laga.GeneticAlgorithm.point.Z">
            <summary>
            get set Z coordinate
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.point.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor a point
            </summary>
            <param name="dblX">X coordinate</param>
            <param name="dblY">Y coordinate</param>
            <param name="dblZ">Z coordinate</param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.point.distanceTo(Laga.GeneticAlgorithm.point)">
            <summary>
            Get the distance between 2 points.
            </summary>
            <param name="pt">The point to Test</param>
            <returns>a double</returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.RankingSort">
            <summary>
            class
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Object[][],System.Single[],System.Boolean)">
            An optimised BidirectionalBubbleSort method.
             Sort the individuals in the population by fitness value.
             
             @param population -> population to sort;
             @param arrResults -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
             @param minmax 	 -> if is true the sort is by min to max, else max to min.
             @return automatically the population is sorted updated. the original population will be modified.
             
             
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Object[][],System.Int32[],System.Boolean)">
            An optimised BidirectionalBubbleSort method.
             Sort the individuals in the population by fitness value.
             
             @param population -> population to sort;
             @param arrResults -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
             @param minmax 	 -> if is true the sort is by min to max, else max to min.
             @return automatically the population is sorted updated. the original population will be modified.
             
             
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Double[][],System.Single[],System.Boolean)">
            An optimised BidirectionalBubbleSort method.
             Sort the individuals in the population by fitness value.
             
             @param population -> population to sort;
             @param arrResults -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
             @param minmax 	 -> if is true the sort is by min to max, else max to min.
             @return automatically the population is sorted updated. the original population will be modified.
             
             
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Double[][],System.Int32[],System.Boolean)">
            An optimised BidirectionalBubbleSort method.
             Sort the individuals in the population by fitness value.
             
             @param population -> population to sort;
             @param arrResults -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
             @param minmax 	 -> if is true the sort is by min to max, else max to min.
             @return automatically the population is sorted updated. the original population will be modified.
             
             
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Single[][],System.Single[],System.Boolean)">
            An optimised BidirectionalBubbleSort method.
             Sort the individuals in the population by fitness value.
             
             @param population -> population to sort;
             @param arrResults -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
             @param minmax 	 -> if is true the sort is by min to max, else max to min.
             @return automatically the population is sorted updated. the original population will be modified.
             
             
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Single[][],System.Int32[],System.Boolean)">
            An optimised BidirectionalBubbleSort method.
             Sort the individuals in the population by fitness value.
             
             @param population -> population to sort;
             @param arrResults -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
             @param minmax 	 -> if is true the sort is by min to max, else max to min.
             @return automatically the population is sorted updated. the original population will be modified.
             
             
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Int32[][],System.Single[],System.Boolean)">
            An optimised BidirectionalBubbleSort method.
             Sort the individuals in the population by fitness value.
             
             @param population -> population to sort;
             @param arrResults -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
             @param minmax 	 -> if is true the sort is by min to max, else max to min.
             @return automatically the population is sorted updated. the original population will be modified.
             
             
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Int32[][],System.Int32[],System.Boolean)">
            An optimised BidirectionalBubbleSort method.
             Sort the individuals in the population by fitness value.
             
             @param population -> population to sort;
             @param arrResults -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
             @param minmax 	 -> if is true the sort is by min to max, else max to min.
             @return automatically the population is sorted updated. the original population will be modified.
             
             
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Char[][],System.Single[],System.Boolean)">
            An optimised BidirectionalBubbleSort method.
             Sort the individuals in the population by fitness value.
             
             @param population -> population to sort;
             @param arrResults -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
             @param minmax 	 -> if is false the sort is by min to max, true max to min.
             @return automatically the population sorted is updated. the original population will be modified.
             
             
            <summary>
            
            </summary>
            <param name="population"></param>
            <param name="arrResults"></param>
            <param name="minmax"></param>
        </member>
        <member name="M:Laga.GeneticAlgorithm.RankingSort.BidirectionalBubbleSort(System.Char[][],System.Int32[],System.Boolean)">
            <summary>
            An optimised BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
            </summary>
            <param name="population">population to sort</param>
            <param name="arrResults">Array of fitness in the population. Only 2 flavors are supported: int[] and float[]</param>
            <param name="minmax">if is true the sort is by min to max, else max to min</param>
            <returns>automatically the population is sorted. the original population will be modified.</returns>
        </member>
        <member name="T:Laga.GeneticAlgorithm.Replacement">
            <summary>
            
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceInheritance(System.Object[][],System.Object[][],System.Int32)">
             ReplaceInheritance method.
             this replace method is ideal for combinatorial problems with objects types in chromsome.
             and where is not possible generate new data in the replacement population.
             The Replace Inheritance use the parents and the mutated Inheritance. becareful...
            
             @param sonMutPopulation  -> the son mutated population
             @param ParentsPopulation -> the parents population.
             @param sizePopulation    -> the size of the population.
             @return object[][] new population.
             
             
            
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceRandom(System.Object[][],System.Single,System.Int32)">
            <summary>
            Creates a new population using the mutated inheritance and new random chromsomes.
            </summary>
            <param name="sonMutPopulation">Object[][]</param>
            <param name="percent">float</param>
            <param name="sizePopulation">int</param>
            <returns>object[][]</returns>
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceInheritanceRandom(System.Object[][],System.Object[][],System.Int32,System.Single)">
             ReplaceInheritanceRandom method.
             this replace method is based in a mix between inheritance and random method, the percentInherit, determines how many
             individuals will (parents) and how many new ones will be created for the new population.
             
            
             @param sonMutPopulation  -> the son mutated population
             @param ParentsPopulation -> the parents population.
             @param sizePopulation    -> the size of the population.
             @param min    			-> min value in the chromosome.
             @param max    			-> max value in the chromosome.
             @param percentInherit    -> percentInherit.
             @return object[][] new population.
             
             
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceInheritance(System.Double[][],System.Double[][],System.Int32)">
             ReplaceInheritance method.
             this replace method is ideal for combinatorial problems with float types in chromsome.
             and where is not possible generate new data in the replacement population.
             The Replace Inheritance use the parents and the mutated Inheritance. to create a new population
            
             @param sonMutPopulation  -> the son mutated population
             @param ParentsPopulation -> the parents population.
             @param sizePopulation    -> the size of the population.
             @return double[][] new population.
             
             
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceRandom(System.Double[][],System.Int32,System.Double,System.Double)">
             ReplaceRandom method.
             this replace method create a new population using the mutated inheritance and new random chromsomes.
            
             @param sonMutPopulation  -> the son mutated population
             @param sizePopulation    -> the size of the population.
             @param min				-> the minimum value in the crhomosome
             @param max				-> the maximum value in the chromosome
             @return double[][] new population.
             
             
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceInheritanceRandom(System.Double[][],System.Double[][],System.Int32,System.Double,System.Double,System.Single)">
             ReplaceInheritanceRandom method.
             this replace method is based in a mix between inheritance and random method, the percentInherit, determines how many
             individuals will (parents) and how many new ones will be created for the new population.
             
            
             @param sonMutPopulation  -> the son mutated population
             @param ParentsPopulation -> the parents population.
             @param sizePopulation    -> the size of the population.
             @param min    			-> min value in the chromosome.
             @param max    			-> max value in the chromosome.
             @param percentInherit    -> percentInherit.
             @return double[][] new population.
             
             
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceInheritance(System.Single[][],System.Single[][],System.Int32)">
             ReplaceInheritance method.
             this replace method is ideal for combinatorial problems with float types in chromsome.
             and where is not possible generate new data in the replacement population.
             The Replace Inheritance use the parents and the mutated Inheritance. to create a new population
            
             @param sonMutPopulation  -> the son mutated population
             @param ParentsPopulation -> the parents population.
             @param sizePopulation    -> the size of the population.
             @return float[][] new population.
             
             
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceRandom(System.Single[][],System.Int32,System.Single,System.Single)">
             ReplaceRandom method.
             this replace method create a new population using the mutated inheritance and new random chromsomes.
            
             @param sonMutPopulation  -> the son mutated population
             @param sizePopulation    -> the size of the population.
             @param min				-> the minimum value in the crhomosome
             @param max				-> the maximum value in the chromosome
             @return float[][] new population.
             
             
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceInheritanceRandom(System.Single[][],System.Single[][],System.Int32,System.Single,System.Single,System.Single)">
             ReplaceInheritanceRandom method.
             this replace method is based in a mix between inheritance and random method, the percentInherit, determines how many
             individuals will (parents) and how many new ones will be created for the new population.
             
            
             @param sonMutPopulation  -> the son mutated population
             @param ParentsPopulation -> the parents population.
             @param sizePopulation    -> the size of the population.
             @param min    			-> min value in the chromosome.
             @param max    			-> max value in the chromosome.
             @param percentInherit    -> percentInherit.
             @return float[][] new population.
             
             
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceInheritance(System.Int32[][],System.Int32[][],System.Int32)">
             ReplaceInheritance method.
             this replace method is ideal for combinatorial problems with float types in chromsome.
             and where is not possible generate new data in the replacement population.
             The Replace Inheritance use the parents and the mutated Inheritance. to create a new population
            
             @param sonMutPopulation  -> the son mutated population
             @param ParentsPopulation -> the parents population.
             @param sizePopulation    -> the size of the population.
             @return int[][] new population.
             
             
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceRandom(System.Int32[][],System.Int32,System.Int32,System.Int32)">
             ReplaceRandom method.
             this replace method create a new population using the mutated inheritance and new random chromsomes.
            
             @param sonMutPopulation  -> the son mutated population
             @param sizePopulation    -> the size of the population.
             @param min				-> the minimum value in the crhomosome
             @param max				-> the maximum value in the chromosome
             @return int[][] new population.
             
             
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.ReplaceInheritanceRandom(System.Int32[][],System.Int32[][],System.Int32,System.Int32,System.Double,System.Single)">
             ReplaceInheritanceRandom method.
             this replace method is based in a mix between inheritance and random method, the percentInherit, determines how many
             individuals will (parents) and how many new ones will be created for the new population.
             
            
             @param sonMutPopulation  -> the son mutated population
             @param ParentsPopulation -> the parents population.
             @param sizePopulation    -> the size of the population.
             @param min    			-> min value in the chromosome.
             @param max    			-> max value in the chromosome.
             @param percentInherit    -> percentInherit.
             @return int[][] new population.
             
             
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.BinaryCharRandomReplace(System.Char[][],System.Int32)">
            CharRandomReplace method.
             set a new a population from the selected individuals.
            
             @param newPartOfPopulation -> selected individuals.
             @param sizePopulation      -> the size of the population.
             @return char[][] population.
             
             
        </member>
        <member name="M:Laga.GeneticAlgorithm.Replacement.CharRandomReplace(System.Char[][],System.Int32,System.Int32,System.Int32)">
            CharRandomReplace method.
             set a new a population from the selected individuals.
            
             @param newPartOfPopulation -> selected individuals.
             @param sizePopulation      -> the size of the population.
             @return char[][] population.
             
             
        </member>
        <member name="T:Laga.IO.IOExcelRead">
            <summary>
            
            </summary>
        </member>
        <member name="P:Laga.IO.IOExcelRead.matrixDataExcel">
            <summary>
            get the data by list format, use this to get the data from excel
            </summary>
        </member>
        <member name="P:Laga.IO.IOExcelRead.SheetNum">
            <summary>
            Get Excel sheet number.
            </summary>
        </member>
        <member name="M:Laga.IO.IOExcelRead.#ctor(System.String)">
            <summary>
            The simpliest constructor
            </summary>
            <param name="FilePath">string, the path to the file</param>
        </member>
        <member name="M:Laga.IO.IOExcelRead.#ctor(System.String,System.Int32)">
            <summary>
            Constructor for IOExcel most flexible constructor.
            therfore you have to deal with all operations:
            open, read or write and close.
            </summary>
            <param name="FilePath">String, the Path to the file</param>
            <param name="SheetNumber">Integer, the index sheet in the excel book</param>
        </member>
        <member name="M:Laga.IO.IOExcelRead.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Simple constructor to read data straightforward from excel
            the simpliest and faster option
            </summary>
            <param name="FilePath">string, the Path to the file</param>
            <param name="SheetNumber">integer, the index sheet in the excel book</param>
            <param name="XlsxRange">string, the excel range to read the data</param>
        </member>
        <member name="M:Laga.IO.IOExcelRead.IOReadRange(System.String)">
            <summary>
            it will read the range specified in the constructor.
            </summary>
            <param name="strXlRange">the range to read the excel, format "A1:B2" if is empty ("") will return the whole data in the workbook</param>
        </member>
        <member name="M:Laga.IO.IOExcelRead.IOReadCell(System.String)">
            <summary>
            Read an specific cell in excel.
            </summary>
            <param name="strXlCell">the range to read the excel, format "A1"</param>
        </member>
        <member name="M:Laga.IO.IOExcelRead.IOWrite_SetActiveSheet(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="display"></param>
        </member>
        <member name="M:Laga.IO.IOExcelRead.TestExcelOpen">
            <summary>
            Test if excel application is open.
            </summary>
        </member>
        <member name="M:Laga.IO.IOExcelRead.IORead_ExcelWorksheetNames">
            <summary>
            Open the App
            return all the excelfile names.
            Close the App, release the Marshalls.
            </summary>
        </member>
        <member name="M:Laga.IO.IOExcelRead.IORead_OpenExcelApp">
            <summary>
            
            </summary>
        </member>
        <member name="M:Laga.IO.IOExcelRead.IORead_OpenExcelApp(System.Boolean)">
            <summary>
            open excel based on the constructor.
            </summary>
            <param name="display">if is true, show the excel"</param>
        </member>
        <member name="M:Laga.IO.IOExcelRead.CloseExcelApp">
            <summary>
            clean all the marshalls and kill excel.
            </summary>
        </member>
        <member name="M:Laga.IO.IOExcelRead.CloseExcelApp(System.Boolean)">
            <summary>
            clean all the marshalls and close - save the excel.
            </summary>
            <param name="saveFile">if is true, will save the file</param>
        </member>
        <member name="M:Laga.IO.IOExcelRead.CloseExcelApp(System.Boolean,System.String,System.String)">
            <summary>
            save and close the excel.
            </summary>
            <param name="saveFile">if is true, will save the file</param>
            <param name="fileName">string, the file name of the excel file</param>
            <param name="directory">string, the address where to save the excel</param>
        </member>
        <member name="T:Laga.IO.IOExcelWrite">
            <summary>
            use this class to write data in excel
            </summary>
        </member>
        <member name="P:Laga.IO.IOExcelWrite.SheetNum">
            <summary>
            get the sheet number 
            </summary>
        </member>
        <member name="P:Laga.IO.IOExcelWrite.matrixDataExcel">
            <summary>
            set the data by nested string list format, use this to get the data from excel
            </summary>
        </member>
        <member name="P:Laga.IO.IOExcelWrite.listDataExcel">
            <summary>
            set the data by string list format, use this to get the data from excel
            </summary>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.CheckExcelFile(System.String)">
            <summary>
            check if the file exists.
            </summary>
            <param name="path">the path to the excel file</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.#ctor(System.String,System.Int32)">
            <summary>
            Sets the basic data to write in excel.
            do not forget call the open and close.
            </summary>
            <param name="FilePath">the direction to the file</param>
            <param name="SheetNumber">the number of the sheet to open</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.#ctor(System.Boolean)">
            <summary>
            Creates and excel workbook.
            do not forget call the open and close.
            </summary>
            <param name="display">true, will display the workboook</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.#ctor(System.String)">
            <summary>
            Sets the basic data to write in excel.
            do not forget call the open and close.
            </summary>
            <param name="FilePath">adress to the file</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.IOWrite_NewExcelSheet(System.Int32,System.String)">
            <summary>
            Open excel based on this constructor
            </summary>
            <param name="pos">the sheet number</param>
            <param name="name">the file name</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.IOWrite_SetActiveSheet(System.Int32)">
            <summary>
            Write in a specific worksheet.
            </summary>
            <param name="pos">the position of the excel sheet in the document.</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.IOWriteItem(System.String,System.Int32,System.Int32)">
            <summary>
            Write a single item to Excel...
            </summary>
            <param name="strItem">the item to write in excel</param>
            <param name="Row">the row position</param>
            <param name="Col">the column position</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.IOWriteList(System.Collections.Generic.List{System.String},System.Int32,System.Int32,System.Char)">
            <summary>
            write list to excel. don't worry for the length of the list. 
            it will calculated automatically.
            </summary>
            <param name="lstString">the list of strings to write excel</param>
            <param name="Row">the row to start writing</param>
            <param name="Col">the column to start writing</param>
            <param name="dir">the direction where you want to write the excel, 'c' for top-down or 'r' for left-right</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.IOWriteMatrix(System.Collections.Generic.List{System.Collections.Generic.List{System.String}},System.Int32,System.Int32,System.Boolean)">
            <summary>
            writes a nested list into excel. don't worry for the length of the list. 
            it will calculated automatically.
            </summary>
            <param name="matData">the nested list of strings to write excel</param>
            <param name="Row">the row to start writing</param>
            <param name="Col">the column to start writing</param>
            <param name="swap">if is true will write first the row, if is false will write first the column</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp">
            <summary>
            open excel and display excel.
            </summary>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp(System.Boolean,System.Int32)">
            <summary>
            open excel based on the constructor
            </summary>
            <param name="display">Show the app</param>
            <param name="sheetNum">open the sheetnumber</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.IOWrite_OpenExcelApp(System.Boolean)">
            <summary>
            open excel based on the constructor.
            </summary>
            <param name="display">if is true, show the excel"</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.CloseSaveExcelApp(System.String)">
            <summary>
            clean all the marshalls and close the excel.
            </summary>
            <param name="Path">string</param>
        </member>
        <member name="M:Laga.IO.IOExcelWrite.CloseExcelApp(System.Boolean)">
            <summary>
            clean all the marshalls and close the excel.
            </summary>
            <param name="saveFile">if is true, will save the file</param>
        </member>
    </members>
</doc>

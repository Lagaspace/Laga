= Replacement =

Public class Replacement, extends Object <br>
The Replace class has some methods to create and initialize the replacement population with the new individuals.
<br>
<br>
<br>
==Constructor Summary== 
Constructor and Description:<br>
One constructor.<br>
{{{Replacement(PApplet parent)}}}
<br>
<br>
<br>
===Method Summary===
Methods Modifier and Types
Methods and Descriptions
<br>
<br>
{{{Object[][] ReplaceInheritance(Object[][] sonMutPopulation, Object[][] ParentsPopulation, int sizePopulation)}}}
<br>
ReplaceInheritance method. this replace method is ideal for combinatorial problems with objects types in chromsome. and where is not possible generate new data in the replacement population. The Replace Inheritance use the parents and the mutated Inheritance. becareful...
Parameters:
sonMutPopulation - -> the son mutated population
ParentsPopulation - -> the parents population.
sizePopulation - -> the size of the population.
Returns:
Object[][] new population.
<br>
<br>
{{{Object[][] ReplaceRandom(Object[][] sonMutPopulation,
                       float percent,
                       int sizePopulation)
ReplaceRandom method. this replace method create a new population using the mutated inheritance and new random chromsomes.
Parameters:
sonMutPopulation - -> the son mutated population
percent - -> the random level of the new chromosomes. 0 < level < 1.
sizePopulation - -> the size of the population.
Returns:
Object[][] new population.
<br>
<br>
{{{Object[][] ReplaceInheritanceRandom(Object[][] sonMutPopulation,
                                  Object[][] ParentsPopulation,
                                  int sizePopulation,
                                  float percentInherit)
ReplaceInheritanceRandom method. this replace method is based in a mix between inheritance and random method, the percentInherit, determines how many individuals will (parents) and how many new ones will be created for the new population.
Parameters:
sonMutPopulation - -> the son mutated population
ParentsPopulation - -> the parents population.
sizePopulation - -> the size of the population.
min - -> min value in the chromosome.
max - -> max value in the chromosome.
percentInherit - -> percentInherit.
Returns:
Object[][] new population.
<br>
<br>
{{{double[][] ReplaceInheritance(double[][] sonMutPopulation,
                            double[][] ParentsPopulation,
                            int sizePopulation)
ReplaceInheritance method. this replace method is ideal for combinatorial problems with float types in chromsome. and where is not possible generate new data in the replacement population. The Replace Inheritance use the parents and the mutated Inheritance. to create a new population
Parameters:
sonMutPopulation - -> the son mutated population
ParentsPopulation - -> the parents population.
sizePopulation - -> the size of the population.
Returns:
double[][] new population.
<br>
<br>
{{{double[][] ReplaceRandom(double[][] sonMutPopulation,
                       int sizePopulation,
                       double min,
                       double max)
ReplaceRandom method. this replace method create a new population using the mutated inheritance and new random chromsomes.
Parameters:
sonMutPopulation - -> the son mutated population
sizePopulation - -> the size of the population.
min - -> the minimum value in the crhomosome
max - -> the maximum value in the chromosome
Returns:
double[][] new population.
<br>
<br>
{{{double[][] ReplaceInheritanceRandom(double[][] sonMutPopulation,
                                  double[][] ParentsPopulation,
                                  int sizePopulation,
                                  double min,
                                  double max,
                                  float percentInherit)
ReplaceInheritanceRandom method. this replace method is based in a mix between inheritance and random method, the percentInherit, determines how many individuals will (parents) and how many new ones will be created for the new population.
Parameters:
sonMutPopulation - -> the son mutated population
ParentsPopulation - -> the parents population.
sizePopulation - -> the size of the population.
min - -> min value in the chromosome.
max - -> max value in the chromosome.
percentInherit - -> percentInherit.
Returns:
double[][] new population.
<br>
<br>
{{{float[][] ReplaceInheritance(float[][] sonMutPopulation,
                           float[][] ParentsPopulation,
                           int sizePopulation)
ReplaceInheritance method. this replace method is ideal for combinatorial problems with float types in chromsome. and where is not possible generate new data in the replacement population. The Replace Inheritance use the parents and the mutated Inheritance. to create a new population
Parameters:
sonMutPopulation - -> the son mutated population
ParentsPopulation - -> the parents population.
sizePopulation - -> the size of the population.
Returns:
float[][] new population.
<br>
<br>
{{{float[][] ReplaceRandom(float[][] sonMutPopulation,
                      int sizePopulation,
                      float min,
                      float max)
ReplaceRandom method. this replace method create a new population using the mutated inheritance and new random chromsomes.
Parameters:
sonMutPopulation - -> the son mutated population
sizePopulation - -> the size of the population.
min - -> the minimum value in the crhomosome
max - -> the maximum value in the chromosome
Returns:
float[][] new population.
<br>
<br>
{{{float[][] ReplaceInheritanceRandom(float[][] sonMutPopulation,
                                 float[][] ParentsPopulation,
                                 int sizePopulation,
                                 float min,
                                 float max,
                                 float percentInherit)
ReplaceInheritanceRandom method. this replace method is based in a mix between inheritance and random method, the percentInherit, determines how many individuals will (parents) and how many new ones will be created for the new population.
Parameters:
sonMutPopulation - -> the son mutated population
ParentsPopulation - -> the parents population.
sizePopulation - -> the size of the population.
min - -> min value in the chromosome.
max - -> max value in the chromosome.
percentInherit - -> percentInherit.
Returns:
float[][] new population.
<br>
<br>
{{{int[][] ReplaceInheritance(int[][] sonMutPopulation,
                         int[][] ParentsPopulation,
                         int sizePopulation)
ReplaceInheritance method. this replace method is ideal for combinatorial problems with float types in chromsome. and where is not possible generate new data in the replacement population. The Replace Inheritance use the parents and the mutated Inheritance. to create a new population
Parameters:
sonMutPopulation - -> the son mutated population
ParentsPopulation - -> the parents population.
sizePopulation - -> the size of the population.
Returns:
int[][] new population.
<br>
<br>
{{{int[][] ReplaceRandom(int[][] sonMutPopulation,
                    int sizePopulation,
                    int min,
                    int max)
ReplaceRandom method. this replace method create a new population using the mutated inheritance and new random chromsomes.
Parameters:
sonMutPopulation - -> the son mutated population
sizePopulation - -> the size of the population.
min - -> the minimum value in the crhomosome
max - -> the maximum value in the chromosome
Returns:
int[][] new population.
<br>
<br>
{{{int[][] ReplaceInheritanceRandom(int[][] sonMutPopulation, int[][] ParentsPopulation, int sizePopulation, int min,double max, float percentInherit)
ReplaceInheritanceRandom method. this replace method is based in a mix between inheritance and random method, the percentInherit, determines how many individuals will (parents) and how many new ones will be created for the new population.
Parameters:
sonMutPopulation - -> the son mutated population
ParentsPopulation - -> the parents population.
sizePopulation - -> the size of the population.
min - -> min value in the chromosome.
max - -> max value in the chromosome.
percentInherit - -> percentInherit.
Returns: int[][] new population.
<br>
<br>
{{{char[][] CharRandomReplace(char[][] newPartOfPopulation, int sizePopulation)
CharRandomReplace method. set a new a population from the selected individuals.
Parameters:
newPartOfPopulation - -> selected individuals.
sizePopulation - -> the size of the population.
Returns:
char[][] population.
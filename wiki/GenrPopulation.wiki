= GenrPopulation =

public class GenrPopulation, extends Object 
<br>
The GenrPopulation class has all the methods to create and initialize different flavors of populations, this class must be called to create the first random population.
<br>
<br>
<br>
==Constructor Summary==
Constructor and Description: 
<br>
One constructor.
<br>
{{{GenrPopulation(PApplet parent)}}}
<br>
<br>
<br>
===Method Summary===
Methods, Modifier and Type	
Method and Description

{{{int[][] BinaryPopulation(int sizePopulation, int sizeChromosome)}}}
<br>
This method creates a binary population, the populations is composed by families of 1s-0s lists.
<br>
 * Parameters
    # {{{sizePopulation}}}: the size of the population
    # {{{sizeChromosome}}}: the length of each chromosome in the population
    # {{{return}}}: population in the flavor int[][]
<br>
<br>
{{{char[][] CharPopulation(int sizePopulation, int sizeChromosome)}}}
<br>
CharPopulation method. Create a Random population by characters The chromosome type is composed by families of chromosomes Class.
<br>
 * Parameters:
    # {{{sizePopulation}}}: the size of the population
    # {{{sizeChromosome}}}: the length of each Chromosome in the population
    # {{{return}}}: a charPopulation in the flavor char[][]
<br>
<br>
{{{double[][] NumbPopulation(int sizePopulation, int sizeChromosome, double min, double max)}}}
<br>
Creates a Random population of doubles. Set the min and max value to control de range.
It should looks like a population composed by families of double numbers.
<br>
 * Parameters:
    # {{{sizePopulation}}}: the size of the population
    # {{{sizeChromosome}}}: the length of each Chromosome in the population
    # {{{min}}}: the minimum value in the chromosome
    # {{{max}}}: the maximum value in the chromosome
    # {{{return}}}: a population of doubles[][]
<br>
<br>
{{{float[][] NumbPopulation(int sizePopulation, int sizeChromosome, float min, float max)}}}
<br>
Creates a Random population of floats Set the min and max value to control de range.
It should looks like a population composed by families of float numbers.
<br>
 * Parameters:
    # {{{sizePopulation}}}: the size of the population
    # {{{sizeChromosome}}}: the length of each Chromosome in the population
    # {{{min}}}: the minimum value in the chromosome
    # {{{max}}}: the maximum value in the chromosome
    # {{{return}}}: a population of flavor float[][]
<br>
<br>
{{{int[][] NumbPopulation(int sizePopulation, int sizeChromosome, int min, int max)}}}
<br>
Creates a Random population of integers Set the min and max value to control de range.
It should looks like a population composed by families of int numbers.
<br>
 * Parameters:
    # {{{sizePopulation}}}: the size of the population
    # {{{sizeChromosome}}}: the length of each Chromosome in the population
    # {{{min}}}: the minimum value in the chromosome
    # {{{max}}}: the maximum value in the chromosome
    # {{{return}}}: a population of flavor int[][]
<br>
<br>
{{{Object[][] ObjectPopulationSwap(int sizePopulation, Object[] SeedChromosome, float percent, boolean InOut)}}}
<br>
Creates a random population based on seed  Object[] chromosome. This method was designed for combinatorial problems.
(make research)
<br>
 * Parameters:
    # {{{sizePopulation}}}: the size of the population;
    # {{{seedChromosome}}}: the seed chromosome to create the population.
    # {{{percent}}}: the mutation percent in the population 0 <= percent <= 1
    # {{{InOut}}}: if is true the seed will be included in the population
    # {{{return}}}: a population of flavor Object[][] based in a seed Object[] chromosome
<br>
<br>
{{{double[][][]	PointsPopulationXYZ(int sizePopulation, double[][] SeedCoordinates, double[][] SeedThershold)}}}
<br>
Creates a random population based on seedCoordinates of xyz in the flavor [[x,y,z],[x,y,z]]. The population returned is in the flavor [[[x,y,z],[x,y,z],n..], [[x,y,z],[x,y,z]],n..] 
<br>
 * Parameters:
    # {{{sizePopulation}}}: the size of the population;
    # {{{seedCoordinates}}}: the seed coordinates feeds the necessary points to establish the coordinates. The length of the seed will represent the size of the chromosome.
    # {{{seedThershold}}}: the seed threshold to determine the movement of points.
    # {{{return}}}: a population of [[[x,y,z],[x,y,z],n..],[[x,y,z],[x,y,z],n..], n..], where x, y and z are doubles.
= RankingSort =
Public class GenrChromosome, extends Object. <br>
The RankingSort class has all the methods to create and initialize the bidirectional BubbleSort algorithm.
<br>
_NOTE_
<br>
_The bidirectional BubbleSort Methods split the list in tho parts, and goes properly than the traditional BubbleSort. Nevertheless I'm working in a most efective method to sort the data. a recursive method will be implemented._

Constructors 
Constructor and Description
RankingSort(PApplet parent) 
Method Summary

Methods 
Modifier and Type	Method and Description
void	BidirectionalBubbleSort(char[][] population, float[] arrResults)
An optimized BidirectionalBubbleSort method.
void	BidirectionalBubbleSort(char[][] population, int[] arrResults)
An optimized BidirectionalBubbleSort method.
void	BidirectionalBubbleSort(double[][] population, float[] arrResults)
An optimized BidirectionalBubbleSort method.
void	BidirectionalBubbleSort(double[][] population, int[] arrResults)
An optimized BidirectionalBubbleSort method.
void	BidirectionalBubbleSort(float[][] population, float[] arrResults)
An optimized BidirectionalBubbleSort method.
void	BidirectionalBubbleSort(float[][] population, int[] arrResults)
An optimized BidirectionalBubbleSort method.
void	BidirectionalBubbleSort(int[][] population, float[] arrResults)
An optimized BidirectionalBubbleSort method.
void	BidirectionalBubbleSort(int[][] population, int[] arrResults)
An optimized BidirectionalBubbleSort method.
void	BidirectionalBubbleSort(Object[][] population, float[] arrResults)
An optimized BidirectionalBubbleSort method.
void	BidirectionalBubbleSort(Object[][] population, int[] arrResults)
An optimized BidirectionalBubbleSort method.
Methods inherited from class java.lang.Object

equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Constructor Detail

RankingSort

public RankingSort(PApplet parent)
Method Detail

BidirectionalBubbleSort

public void BidirectionalBubbleSort(Object[][] population,
                           float[] arrResults)
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
BidirectionalBubbleSort

public void BidirectionalBubbleSort(Object[][] population,
                           int[] arrResults)
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
BidirectionalBubbleSort

public void BidirectionalBubbleSort(double[][] population,
                           float[] arrResults)
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
BidirectionalBubbleSort

public void BidirectionalBubbleSort(double[][] population,
                           int[] arrResults)
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
BidirectionalBubbleSort

public void BidirectionalBubbleSort(float[][] population,
                           float[] arrResults)
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
BidirectionalBubbleSort

public void BidirectionalBubbleSort(float[][] population,
                           int[] arrResults)
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
BidirectionalBubbleSort

public void BidirectionalBubbleSort(int[][] population,
                           float[] arrResults)
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
BidirectionalBubbleSort

public void BidirectionalBubbleSort(int[][] population,
                           int[] arrResults)
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
BidirectionalBubbleSort

public void BidirectionalBubbleSort(char[][] population,
                           float[] arrResults)
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
BidirectionalBubbleSort

public void BidirectionalBubbleSort(char[][] population,
                           int[] arrResults)
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
= RankingSort =
Public class GenrChromosome, extends Object<br>
The RankingSort class has all the methods to create and initialize the bidirectional BubbleSort algorithm.
<br>
_NOTE
<br>
The bidirectional BubbleSort Methods split the list in tho parts, and goes properly than the traditional BubbleSort. Nevertheless I'm working in a most efective method to sort the data. a recursive method will be implemented._
<br>
<br>
<br> 
==Constructor Summary== 
Constructor and Description:<br>
One constructor.
<br>
<br>
===Method Summary===
Methods Modifier and Types
Methods and Descriptions
{{{RankingSort(PApplet parent)}}}
<br>
<br>
{{{BidirectionalBubbleSort(Object[][] population, float[] arrResults)}}}
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
BidirectionalBubbleSort

{{{void BidirectionalBubbleSort(Object[][] population, int[] arrResults)}}}
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
BidirectionalBubbleSort

{{{void BidirectionalBubbleSort(double[][] population, float[] arrResults)}}}
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
BidirectionalBubbleSort

{{{void BidirectionalBubbleSort(double[][] population, int[] arrResults)}}}
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
BidirectionalBubbleSort

{{{void BidirectionalBubbleSort(float[][] population, float[] arrResults)}}}
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
BidirectionalBubbleSort

{{{void BidirectionalBubbleSort(float[][] population, int[] arrResults)}}}
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
BidirectionalBubbleSort

{{{void BidirectionalBubbleSort(int[][] population, float[] arrResults)}}}
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
BidirectionalBubbleSort

{{{void BidirectionalBubbleSort(int[][] population, int[] arrResults)}}}
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
BidirectionalBubbleSort

{{{void BidirectionalBubbleSort(char[][] population, float[] arrResults)}}}
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.
BidirectionalBubbleSort

{{{void BidirectionalBubbleSort(char[][] population, int[] arrResults)}}}
An optimized BidirectionalBubbleSort method. Sort the individuals in the population by fitness value.
Parameters:
population - -> population to sort;
arrResults - -> Array of fitness in the population. Only two flavors are supported: int[] and float[].
minmax - -> if is true the sort is by min to max, else max to min.